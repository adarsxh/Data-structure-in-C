#include<iostream>
#include<string>
using namespace std;

const int maxm=1000;
const int maxn=1000;
int memo[maxm][maxn];


//below is LCS funtion recursively

int LCSrec(string s1, string s2, int m, int n){
	if(m==0||n==0)
		return 0;
	if(s1[m-1]==s2[n-1])
		return 1+LCSrec(s1, s2, m-1, n-1);
	else
		return max(LCSrec(s1, s2, m-1, n), LCSrec(s1, s2, m, n-1));
}

//below is the LCS funtion using dynamic programming using memoization

int LCSmemo(string s1, string s2, int m, int n){
	if(memo[m][n]!=-1)
		return memo[m][n];
	if(m==0||n==0)
		memo[m][n]=0;
	else{
		if(s1[m-1]==s2[n-1])
			memo[m][n] = 1+ LCSmemo(s1,s2,m-1,n-1);
		else
			memo[m][n]=max(LCSmemo(s1,s2,m-1,n), LCSmemo(s1,s2,m,n-1));
	}
	return memo[m][n];
}
/*
  below is LCS function using dynamic programming with tabulation method
  */


int LCStab(string s1, string s2){
	int m=s1.length(), n=s2.length();
	int dp[m+1][n+1];
	for(int i=0;i<=m;i++)
		dp[0][i]=0;
	for(int i=0;i<=n;i++)
		dp[i][0]=0;
	for(int i=1;i<=m;i++){
		for(int j=1;j<=n;j++){
			if(s1[i-1]==s2[j-1])
				dp[i][j] =1+ dp[i-1][j-1];
			else
				dp[i][j] = max(dp[i-1][j], dp[i][j-1]);
		}
	}
	return dp[m][n];
}



int main(){
	
	string s1 = "Adarsh";
	string s2 = "ardh";
	int m=s1.length();
	int n=s2.length();
	for(int i=0;i<=m;i++){
		for(int j=0;j<=n;j++)
			memo[i][j]=-1;
	}
	cout<<LCSrec(s1,s2,m, n)<<endl;
	cout<<LCSmemo(s1,s2,m,n)<<endl;
	cout<<LCStab(s1,s2)<<endl;
}
